#include <stdio.h>
#include <stdlib.h>

// Definition for a binary tree node.
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
};

// Function to create a new TreeNode.
struct TreeNode* newNode(int val) {
    struct TreeNode* node = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    node->val = val;
    node->left = node->right = NULL;
    return node;
}

// Function to insert a new node into the BST.
struct TreeNode* insert(struct TreeNode* root, int val) {
    if (root == NULL)
        return newNode(val);

    if (val < root->val)
        root->left = insert(root->left, val);
    else if (val > root->val)
        root->right = insert(root->right, val);

    return root;
}

// Function to find the LCA of two nodes n1 and n2.
struct TreeNode* lowestCommonAncestor(struct TreeNode* root, int n1, int n2) {
    if (root == NULL)
        return NULL;

    // If both n1 and n2 are smaller than root, then LCA lies in the left subtree.
    if (root->val > n1 && root->val > n2)
        return lowestCommonAncestor(root->left, n1, n2);

    // If both n1 and n2 are greater than root, then LCA lies in the right subtree.
    if (root->val < n1 && root->val < n2)
        return lowestCommonAncestor(root->right, n1, n2);

    // If root is between n1 and n2, it is the LCA.
    return root;
}

// Function to perform in-order traversal of the BST.
void inorderTraversal(struct TreeNode* root) {
    if (root != NULL) {
        inorderTraversal(root->left);
        printf("%d ", root->val);
        inorderTraversal(root->right);
    }
}

int main() {
    struct TreeNode* root = NULL;
    int n, val, n1, n2;

    // Input: Number of nodes in the BST.
    printf("Enter the number of nodes in the BST: ");
    scanf("%d", &n);

    // Input: Node values.
    printf("Enter the node values:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &val);
        root = insert(root, val);
    }

    // Display the in-order traversal of the BST.
    printf("In-order traversal of the BST: ");
    inorderTraversal(root);
    printf("\n");

    // Input: Two node values to find their LCA.
    printf("Enter the two node values to find their LCA: ");
    scanf("%d %d", &n1, &n2);

    // Find the LCA of the two nodes.
    struct TreeNode* lca = lowestCommonAncestor(root, n1, n2);
    if (lca != NULL)
        printf("LCA of %d and %d is %d\n", n1, n2, lca->val);
    else
        printf("LCA not found.\n");

    return 0;
}
